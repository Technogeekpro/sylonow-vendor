import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:image_picker/image_picker.dart';
import '../models/private_theater.dart';
import '../providers/theater_provider.dart';
import '../service/theater_service.dart';
import '../../onboarding/providers/vendor_provider.dart';

final simpleTheaterControllerProvider = ChangeNotifierProvider((ref) {
  return SimpleTheaterController(ref);
});

class SimpleTheaterController extends ChangeNotifier {
  final Ref _ref;
  final TheaterService _theaterService;

  SimpleTheaterController(this._ref) : _theaterService = _ref.read(theaterServiceProvider);

  // Form Controllers
  final nameController = TextEditingController();
  final descriptionController = TextEditingController();

  // State Variables
  bool _isLoading = false;
  List<String> _theaterImages = [];
  final ImagePicker _picker = ImagePicker();

  // Getters
  bool get isLoading => _isLoading;
  List<String> get theaterImages => _theaterImages;

  @override
  void dispose() {
    nameController.dispose();
    descriptionController.dispose();
    super.dispose();
  }

  // Submit theater for admin approval
  Future<void> submitTheater() async {
    try {
      _isLoading = true;
      notifyListeners();

      // Auto-retrieve location data from vendor profile
      final vendorAsync = _ref.read(vendorProvider);
      Map<String, dynamic>? vendorLocation;
      
      if (vendorAsync.hasValue && vendorAsync.value?.location != null) {
        vendorLocation = vendorAsync.value!.location;
        print('üîç DEBUG: Using vendor location for simple theater: $vendorLocation');
      }

      // Extract location data from vendor profile
      final String address = vendorLocation?['address']?.toString() ?? 'Theater Address';
      final String city = vendorLocation?['city']?.toString() ?? 'City';
      final String state = vendorLocation?['state']?.toString() ?? 'State';
      final String pinCode = vendorLocation?['pinCode']?.toString() ?? '000000';
      final double? latitude = vendorLocation?['latitude']?.toDouble();
      final double? longitude = vendorLocation?['longitude']?.toDouble();

      print('üîç DEBUG: Simple theater location - Address: $address, City: $city, State: $state, PinCode: $pinCode');

      // Create theater object with admin approval status
      final theater = PrivateTheater(
        id: '', // Will be generated by database
        name: nameController.text.trim(),
        description: descriptionController.text.trim().isEmpty 
            ? null 
            : descriptionController.text.trim(),
        address: address,
        city: city,
        state: state,
        pinCode: pinCode,
        latitude: latitude,
        longitude: longitude,
        capacity: null, // Not required for simple theater creation
        amenities: [], // Empty for now
        images: _theaterImages, // Use uploaded images
        hourlyRate: 0, // Will be set after approval during screen configuration
        
        // Contact information - using vendor info as defaults
        contactName: null, // Will be filled from vendor profile if needed
        contactPhone: null, // Will be filled from vendor profile if needed
        
        // Admin approval fields
        approvalStatus: 'pending', // Submitted for approval
        isActive: false, // Will be activated after approval
        rating: 0.0, // Will be calculated later
        totalReviews: 0,
        
        // Default values for required fields
        bookingDurationHours: 2,
        advanceBookingDays: 30,
        cancellationPolicy: 'Free cancellation up to 24 hours before the booking',
      );

      // Submit to database with pending status
      await _ref.read(theatersProvider.notifier).createTheater(theater);
      
      // Reset form after successful submission
      _resetForm();
    } catch (e) {
      print('üî¥ Error submitting theater: $e');
      rethrow;
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  // Validate form
  bool validateForm() {
    return nameController.text.trim().isNotEmpty;
  }

  // Reset form
  void _resetForm() {
    nameController.clear();
    descriptionController.clear();
    _theaterImages.clear();
    notifyListeners();
  }

  // Pick and upload theater images
  Future<void> pickTheaterImages() async {
    try {
      final imageUrls = await _theaterService.pickAndUploadTheaterImages(
        maxImages: 5,
        existingImages: _theaterImages,
      );
      
      _theaterImages = imageUrls;
      notifyListeners();
    } catch (e) {
      print('üî¥ Error picking theater images: $e');
      rethrow;
    }
  }

  // Remove image from list
  void removeImage(int index) {
    if (index >= 0 && index < _theaterImages.length) {
      _theaterImages.removeAt(index);
      notifyListeners();
    }
  }

  // Add image URL (for web or direct URL input)
  void addImageUrl(String imageUrl) {
    if (imageUrl.isNotEmpty && !_theaterImages.contains(imageUrl)) {
      _theaterImages.add(imageUrl);
      notifyListeners();
    }
  }
}